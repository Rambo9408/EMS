    <%- include('include/_header') %>

    <main id="site-main">
        <div class="container">
            <div class="box-nav d-flex justify-between">
                <a href="/add-employee" class="border-shadow">
                    <span class="text-gradient">Add New Employee <i class="fas fa-user-plus"></i></span>
                </a>
            </div>

            <div class="search-container">
                <input type="text" id="search-input" placeholder="Enter name, email, or mobile number">
                <button id="search-button">Search</button>
                <p id="search-error" style="color: red; display: none;">Please provide a value to search.</p>
            </div>

            <form action="/" method="POST">
                <table class="table">
                    <thead class="thead-dark">
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Mobile No</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <%- include('include/_show', { employees: employees }) %>
                    </tbody>
                </table>
            </form>
        </div>
    </main>

<%- include('include/_footer') %>


<script>
    const searchInput = document.getElementById('search-input');
    
    searchInput.addEventListener('input', () => {
        const searchQuery = searchInput.value.trim();
        
        if (searchQuery === '') {
            // If search input is empty,It'll fetch all employees
            fetch('/api/employees')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(allEmployees => {
                    updateTable(allEmployees);
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        } else {
            // If search input is not empty, fetch filtered data
            fetch(`/api/search?query=${searchQuery}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(filteredData => {
                    updateTable(filteredData);
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        }
    });
    
    function updateTable(data) {
        // Clear the existing table rows
        const tbody = document.querySelector('table tbody');
        tbody.innerHTML = '';
    
        // Add a row for each record
        data.forEach((item, index) => {
            const row = tbody.insertRow();
    
            const idCell = row.insertCell();
            idCell.textContent = index + 1;
            
            const nameCell = row.insertCell();
            nameCell.textContent = item.name;
    
            const emailCell = row.insertCell();
            emailCell.textContent = item.email;
    
            const mobileCell = row.insertCell();
            mobileCell.textContent = item.mobile;
    
            const actionCell = row.insertCell();
            actionCell.innerHTML = `
                <button class="btn border-shadow update" onclick="editEmployee('${item._id}')"><span class="text-gradient">Edit</span></button>
                <button class="btn border-shadow delete" onclick="deleteEmployee('${item._id}')"><span class="text-gradient">Delete</span></button>
            `;
        });
    }

    function editEmployee(id) {
        // Redirect to the edit page with the employee ID
        window.location.href = `/update-employee?id=${id}`;
    }

    function deleteEmployee(id) {
        // Call delete API to delete the employee
        fetch(`/api/employees/${id}`, {
            method: 'DELETE'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            // Reload the table after deletion
            searchInput.dispatchEvent(new Event('input'));
        })
        .catch(error => {
            console.error('Error deleting employee:', error);
            // Handle error: display error message or retry
        });
    }
</script>


